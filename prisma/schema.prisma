// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User{
  id String @id @default(uuid())
  clerkUserId String @unique //clerk id
  email String @unique 
  name String?
  imgUrl String?
  industry String? //ex. tech-sw-developemt
  IndustryInsight IndustryInsight? @relation(fields: [industry],references: [industry])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  //profile fields
  bio String?
  experience Int? //year of experience
  skills String[] //array of skills

  assessments Assessment[]
  resume Resume?
  coverLetter CoverLetter[]

}

model Assessment{
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId],references: [id])
  quizScore Float
  questions Json[] 
  category String
  improvementTip String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])

}
model Resume{
  id String @id @default(cuid())
  userId String @unique //one resume per user
  user User @relation(fields: [userId],references: [id])
  content String @db.Text //markdown content
  atsScore Float?
  feedback String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
model CoverLetter{
  id String @id @default(cuid())
  userId String
  user User @relation(fields: [userId],references: [id])
  content String ////markdown content
  jobDescription String?
  companyName String?
  jobTitle String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}
model IndustryInsight{
  id String @id @default(cuid())
  industry String @unique

  //users in the industry
  users User[]

  //salary data
  salaryRanges Json[]

  //industry trends
  growthRate Float  //industry growth rate
  demandLevel DemandLevel //high medium low
  topSkills String[] //most in demand skills

  //market conditions
  marketOutlook MarketOutlook
  keyTrends String[]

  //learning suggestions
  recommendedSkills String[]

  lastUpdated DateTime @default(now())
  nextUpdate DateTime

  @@index([industry])

}

enum DemandLevel{
  HIGH 
  MEDIUM 
  LOW
}

enum MarketOutlook{
  POSITIVE 
  NEUTRAL
  NEGATIVE
}
